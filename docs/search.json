[
  {
    "objectID": "project_up.html",
    "href": "project_up.html",
    "title": "Aid Under Attack: Analyzing Security Threats to Humanitarian Operations",
    "section": "",
    "text": "“The ultimate tragedy is not the brutality of the bad people, but the silence of the good people.”\n— Martin Luther King Jr."
  },
  {
    "objectID": "project_up.html#executive-summary",
    "href": "project_up.html#executive-summary",
    "title": "Aid Under Attack: Analyzing Security Threats to Humanitarian Operations",
    "section": "Executive Summary",
    "text": "Executive Summary\nThis analysis explores security threats facing humanitarian aid workers worldwide based on over 4,300 incidents from 1997 to 2025. Through data visualization and analysis, we uncover patterns that can help organizations better protect their personnel and operations.\nKey findings include:\n\nA dramatic 900% increase in security incidents over time (from 34 in 1997 to 353 in 2024)\nGeographic concentration of high-risk areas in South Sudan, Syria, Afghanistan, and Gaza\nShootings, kidnappings, and assaults emerging as the predominant attack methods\nAn alarming vulnerability gap between national and international staff, with national staff bearing over 80% of casualties\nA concerning pattern of unidentified perpetrators (52% of incidents), hindering accountability\n\nOur visualizations tell a compelling story of increasing danger for humanitarian workers and highlight critical areas where protective measures are most needed."
  },
  {
    "objectID": "project_up.html#the-escalating-crisis-incidents-over-time",
    "href": "project_up.html#the-escalating-crisis-incidents-over-time",
    "title": "Aid Under Attack: Analyzing Security Threats to Humanitarian Operations",
    "section": "1. The Escalating Crisis: Incidents Over Time",
    "text": "1. The Escalating Crisis: Incidents Over Time\n\n\nCode\n# Group by year and count incidents\nyearly_incidents = df.groupby('Year').size().reset_index(name='Incidents')\n\n# Calculate year-over-year percent change\nyearly_incidents['YoY_Change'] = yearly_incidents['Incidents'].pct_change() * 100\n\n# Create a figure with two subplots - one for the trend and one for YoY change\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 7), height_ratios=[2, 1], gridspec_kw={'hspace': 0.3})\n\n# Plot incidents over time\nbars = ax1.bar(yearly_incidents['Year'], yearly_incidents['Incidents'], color=main_palette[2], alpha=0.8)\nax1 = style_plot(ax1, 'Total Security Incidents by Year', '', 'Number of Incidents')\n\n# Add a trend line\nx = yearly_incidents['Year']\ny = yearly_incidents['Incidents']\nz = np.polyfit(x, y, 1)\np = np.poly1d(z)\nax1.plot(x, p(x), \"r--\", alpha=0.7, linewidth=2)\n\n# Add milestone annotations \nmilestones = {\n    2003: ('Iraq War (2003)', 0.6),\n    2011: ('Arab Spring (2011)', 0.18), \n    2013: ('S. Sudan Civil War (2013)', 0.7),\n    2014: ('Rise of ISIS (2014)', 0.1),\n    2020: ('COVID-19 Pandemic (2020)', 0.9),\n    2022: ('Russia-Ukraine War (2022)', 0.25)\n}\n\nfor year, (event, vert_pos_factor) in milestones.items():\n    if year in yearly_incidents['Year'].values:\n        idx = yearly_incidents[yearly_incidents['Year'] == year].index[0]\n        incidents = yearly_incidents.loc[idx, 'Incidents']\n        max_height = ax1.get_ylim()[1]\n        \n        # Position the annotation at a percentage of max height\n        vert_pos = vert_pos_factor * max_height\n        \n        # Draw a line to the bar\n        ax1.annotate(\"\", xy=(year, incidents), xytext=(year, vert_pos),\n                    arrowprops=dict(arrowstyle=\"-\", color=\"gray\", alpha=0.7))\n        \n        # Add the text annotation\n        ax1.annotate(f\"{event}\\n({incidents} incidents)\", \n                    xy=(year, vert_pos),\n                    xytext=(0, 5),\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom',\n                    bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"white\", alpha=0.9),\n                    fontsize=8)\n\n# Plot YoY percentage change\nbars2 = ax2.bar(yearly_incidents['Year'][1:], yearly_incidents['YoY_Change'][1:],\n              color=[accent_palette[1] if x &lt; 0 else accent_palette[5] for x in yearly_incidents['YoY_Change'][1:]])\nax2 = style_plot(ax2, 'Year-over-Year Change in Incidents (%)', 'Year', 'Percent Change (%)')\nax2.axhline(y=0, color='gray', linestyle='-', alpha=0.7)\n\n# Format y-axis with percent sign\nax2.yaxis.set_major_formatter(ticker.PercentFormatter(decimals=0))\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 1: Security Incidents Affecting Humanitarian Workers (1997-2024)\n\n\n\n\n\nThe data reveals a disturbing upward trend in attacks on humanitarian workers. From just 34 incidents in 1997, the number surged to 353 in 2024—a staggering 938% increase.\nThis trend correlates strongly with major global conflicts. The Iraq War (2003) marked the beginning of a steady rise, while the Arab Spring (2011), South Sudan Civil War (2013), and ISIS’s emergence (2014) all contributed to significant increases. More recently, the COVID-19 pandemic and Russia-Ukraine War coincided with continued high rates of attacks.\nThe year-over-year percentage changes (bottom chart) illustrate the volatility, with some years showing over 50% increases. Even in years with modest decreases, the overall trajectory remains sharply upward.\nThis erosion of humanitarian protection has critical implications: when aid workers become targets, vulnerable populations suffer doubly—first from the conflict or disaster that created their needs, and second from diminished assistance when security concerns hamper operations."
  },
  {
    "objectID": "project_up.html#dangerous-ground-geographic-distribution-of-risk",
    "href": "project_up.html#dangerous-ground-geographic-distribution-of-risk",
    "title": "Aid Under Attack: Analyzing Security Threats to Humanitarian Operations",
    "section": "2. Dangerous Ground: Geographic Distribution of Risk",
    "text": "2. Dangerous Ground: Geographic Distribution of Risk\n\n\nCode\n# For regions analysis, we'll filter out \"Unknown\" region as it doesn't provide actionable insights\n# This is a data cleaning decision based on the fact that Unknown regions don't help with geographic targeting\nfiltered_regions = df[df['Region'] != 'Unknown']\n\n# Count incidents by region, sort and take top 20\nregion_counts = filtered_regions['Region'].value_counts().reset_index()\nregion_counts.columns = ['Region', 'Incidents']\ntop_regions = region_counts.head(20).sort_values('Incidents')\n\n# Create horizontal bar chart for top regions\nfig, ax = plt.subplots(figsize=(8, 6))\nbars = ax.barh(top_regions['Region'], top_regions['Incidents'], color=main_palette[3], alpha=0.8)\n\n# Add data labels\nfor i, v in enumerate(top_regions['Incidents']):\n    ax.text(v + 2, i, str(v), va='center', fontsize=9)\n\n# Style the plot\nax = style_plot(ax, 'Top 20 Regions by Number of Security Incidents (1997-2024)', 'Number of Incidents', '')\n\nplt.tight_layout()\nplt.show()\n\n# Note: We've removed \"Unknown\" regions from this analysis as they don't provide actionable geographic insights.\n# This represents a data cleaning decision to focus on known locations where specific security measures can be implemented.\n\n\n\n\n\n\n\n\nFigure 2: Top 20 Most Dangerous Regions for Humanitarian Workers\n\n\n\n\n\n\n\nCode\n# Aggregate casualties by country\ncasualties_by_country = df.groupby('Country')[['Total killed', 'Total wounded', 'Total kidnapped']].sum().reset_index()\ncasualties_by_country['Total casualties'] = casualties_by_country[['Total killed', 'Total wounded', 'Total kidnapped']].sum(axis=1)\ntop_countries = casualties_by_country.sort_values('Total casualties', ascending=False).head(15)\n\n# Create a stacked bar chart for casualties by country\nfig, ax = plt.subplots(figsize=(8, 5))\n\n# Plot stacked bars\nbars1 = ax.bar(top_countries['Country'], top_countries['Total killed'], \n       label='Killed', color=accent_palette[6])\nbars2 = ax.bar(top_countries['Country'], top_countries['Total wounded'], \n       bottom=top_countries['Total killed'], label='Wounded', color=accent_palette[4])\nbars3 = ax.bar(top_countries['Country'], top_countries['Total kidnapped'], \n       bottom=top_countries['Total killed'] + top_countries['Total wounded'], \n       label='Kidnapped', color=accent_palette[1])\n\n# Add data labels for total casualties with better visibility\nfor i, country in enumerate(top_countries['Country']):\n    total = top_countries.loc[top_countries['Country'] == country, 'Total casualties'].iloc[0]\n    ax.text(i, total + 10, f'{int(total)}', ha='center', fontsize=9, fontweight='bold',\n           path_effects=[pe.withStroke(linewidth=2, foreground='white')])\n\n# Style the plot\nax = style_plot(ax, 'Humanitarian Worker Casualties by Country (Top 15)', '', 'Number of Casualties')\nplt.xticks(rotation=45, ha='right')\nplt.legend(loc='upper right')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 3: Humanitarian Worker Casualties by Country (Top 15 Countries)\n\n\n\n\n\nInteractive Map: Use the dropdown menu in the top right corner to view total incidents, killed, wounded, or kidnapped aid workers by country. Hover over countries to see detailed statistics.\n\n\nCode\n# Import required libraries\nimport plotly.graph_objects as go\nimport pycountry\nimport numpy as np\n\n# Convert country codes from Alpha-2 to Alpha-3 format (required by Plotly)\ndef alpha2_to_alpha3(code):\n    if pd.isnull(code):\n        return None\n    try:\n        return pycountry.countries.get(alpha_2=code).alpha_3\n    except (AttributeError, KeyError):\n        return None\n\n# Add Alpha-3 code column\ndf['Country Code Alpha-3'] = df['Country Code'].apply(alpha2_to_alpha3)\n\n# Aggregate data by country\ndf_map = df.groupby(['Country', 'Country Code Alpha-3']).agg(\n    Incidents=('Incident ID', 'count'),\n    Total_Killed=('Total killed', 'sum'),\n    Total_Wounded=('Total wounded', 'sum'),\n    Total_Kidnapped=('Total kidnapped', 'sum')\n).reset_index()\n\n# Create map visualization\ncolor_scale = 'Reds'  # Use red gradient to show severity\nfig = go.Figure()\n\n# Create a Choropleth layer for each metric\nfor i, metric in enumerate(['Incidents', 'Total_Killed', 'Total_Wounded', 'Total_Kidnapped']):\n    # Process data, replace 0 values with NaN to avoid showing them on the map\n    z_values = df_map[metric].copy()\n    z_masked = np.where(z_values == 0, np.nan, z_values)\n    \n    # Set visibility (only first metric initially visible)\n    visible = True if i == 0 else False\n    \n    # Create Choropleth layer\n    fig.add_trace(go.Choropleth(\n        locations=df_map['Country Code Alpha-3'],\n        z=z_masked,\n        text=df_map['Country'],\n        colorscale=color_scale,\n        colorbar_title=metric.replace('_', ' '),\n        zmin=1,  # Start from 1 to avoid including areas with no data\n        zmax=df_map[metric].quantile(0.95),  # Use 95th percentile to avoid extreme values distorting the color scale\n        visible=visible,\n        hovertemplate='&lt;b&gt;%{text}&lt;/b&gt;&lt;br&gt;' +\n                      'Incidents: %{customdata[0]}&lt;br&gt;' +\n                      'Killed: %{customdata[1]}&lt;br&gt;' +\n                      'Wounded: %{customdata[2]}&lt;br&gt;' +\n                      'Kidnapped: %{customdata[3]}&lt;extra&gt;&lt;/extra&gt;',\n        customdata=np.stack([df_map['Incidents'], \n                            df_map['Total_Killed'], \n                            df_map['Total_Wounded'],\n                            df_map['Total_Kidnapped']], axis=-1)\n    ))\n\n# Add dropdown menu to switch between different metrics\nfig.update_layout(\n    title=dict(\n        text=\"Attacks on Humanitarian Workers by Country (1997-2024)\",\n        y=0.93,  \n    ),\n    margin=dict(l=0, r=0, t=80, b=0),  \n    height=450,  # Control map height\n    width=700,   # Control map width\n    geo=dict(\n        showframe=False,\n        showcoastlines=True,\n        projection_type='equirectangular'\n    ),\n    updatemenus=[\n        dict(\n            buttons=list([\n                dict(label=\"Total Incidents\",\n                     method=\"update\",\n                     args=[{\"visible\": [True, False, False, False]},\n                           {\"title.text\": \"Total Security Incidents by Country (1997-2024)\"}]),\n                dict(label=\"Total Killed\",\n                     method=\"update\",\n                     args=[{\"visible\": [False, True, False, False]},\n                           {\"title.text\": \"Total Humanitarian Workers Killed by Country (1997-2024)\"}]),\n                dict(label=\"Total Wounded\",\n                     method=\"update\",\n                     args=[{\"visible\": [False, False, True, False]},\n                           {\"title.text\": \"Total Humanitarian Workers Wounded by Country (1997-2024)\"}]),\n                dict(label=\"Total Kidnapped\",\n                     method=\"update\",\n                     args=[{\"visible\": [False, False, False, True]},\n                           {\"title.text\": \"Total Humanitarian Workers Kidnapped by Country (1997-2024)\"}])\n            ]),\n            direction=\"down\",\n            showactive=True,\n            x=0.85,  # Positioned in top right\n            xanchor=\"right\",\n            y=1.1,  # Moved above the figure for better visibility\n            yanchor=\"top\"\n        )\n    ],\n    annotations=[\n        dict(\n            x=0.8,\n            y=1.05,\n            xref=\"paper\",\n            yref=\"paper\",\n            text=\"View by:\",\n            showarrow=False,\n            font=dict(size=10)\n        ),\n        dict(\n            x=0.5,\n            y=-0.1,\n            xref=\"paper\",\n            yref=\"paper\",\n            text=\"Interactive Map of Humanitarian Worker Security Incidents\",\n            showarrow=False,\n            font=dict(size=12)\n        )\n    ]\n)\nfig.show()\n\n\n\n\n\n\n\n        \n        \n        \n\n\n(a) Interactive Map of Humanitarian Worker Security Incidents\n\n\n\n\n\n\n                            \n                                            \n\n\n(b)\n\n\n\n\n\nFigure 4\n\n\n\n\nThe geographic distribution of incidents reveals clear patterns of risk concentration. After removing “Unknown” regions (which don’t provide actionable insights), we can see that:\n\nSouth Sudan emerges as a primary hotspot, with three regions (Jonglei, Central Equatoria, and Unity) among the top 10 most dangerous areas.\nSyria contains two of the most perilous regions (Idlib and Aleppo), while the Gaza Strip also ranks among the highest-risk locations.\nDemocratic Republic of Congo (North and South Kivu), Somalia (Banadir), and Afghanistan (Kabul) complete the most dangerous regions.\n\nThe casualty data adds another dimension, showing that Afghanistan, Syria, and South Sudan not only have high incident counts but also the highest numbers of casualties. The stacked bars reveal different casualty patterns by country—Afghanistan and South Sudan have high numbers of deaths, while Syria shows a larger proportion of wounded.\nThe interactive map offers a global perspective on this distribution. It reveals how humanitarian risk is heavily concentrated in specific regions experiencing protracted conflicts, while vast areas of the world see minimal incidents.\nThis geographic concentration has important implications for humanitarian operations, suggesting the need for context-specific security strategies rather than one-size-fits-all approaches."
  },
  {
    "objectID": "project_up.html#weapons-of-choice-attack-methods-and-their-impact",
    "href": "project_up.html#weapons-of-choice-attack-methods-and-their-impact",
    "title": "Aid Under Attack: Analyzing Security Threats to Humanitarian Operations",
    "section": "3. Weapons of Choice: Attack Methods and Their Impact",
    "text": "3. Weapons of Choice: Attack Methods and Their Impact\n\n\nCode\n# Count incidents by attack method\nattack_counts = df['Means of attack'].value_counts().reset_index()\nattack_counts.columns = ['Means of attack', 'Incidents']\n\n# Calculate average casualties by attack method\nattack_lethality = df.groupby('Means of attack')[['Total killed', 'Total wounded', 'Total kidnapped']].mean().reset_index()\nattack_lethality['Avg casualties per incident'] = attack_lethality[['Total killed', 'Total wounded', 'Total kidnapped']].sum(axis=1)\n\n# Merge the two dataframes\nattack_analysis = pd.merge(attack_counts, attack_lethality, on='Means of attack')\n\n# Filter to include only the top 12 most common attack methods\ntop_attacks = attack_analysis.sort_values('Incidents', ascending=False).head(12)\n\n# Create a figure with two subplots\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 8), gridspec_kw={'height_ratios': [1.5, 1], 'hspace': 0.8})  # Increased spacing between subplots\n\n# Plot incidents by attack method (top subplot)\nbars1 = ax1.bar(top_attacks['Means of attack'], top_attacks['Incidents'], color=main_palette[3])\nax1 = style_plot(ax1, 'Frequency of Attack Methods Against Humanitarian Workers', '', 'Number of Incidents')\nplt.setp(ax1.xaxis.get_majorticklabels(), rotation=45, ha='right')\n\n# Second subplot - average casualties per incident by attack method\nbars2 = ax2.bar(top_attacks['Means of attack'], top_attacks['Avg casualties per incident'], color=accent_palette[4])\nax2 = style_plot(ax2, 'Average Casualties per Incident by Attack Method', '', 'Average Casualties')\nplt.setp(ax2.xaxis.get_majorticklabels(), rotation=45, ha='right')\n\n# Annotate bars with values\nfor i, v in enumerate(top_attacks['Avg casualties per incident']):\n    ax2.text(i, v + 0.1, f'{v:.1f}', ha='center', fontsize=9)\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 5: Frequency and Lethality of Different Attack Methods\n\n\n\n\n\nInteractive Chart: Hover over the chart to see the exact proportions of each attack method for any given year. Click on legend items to hide or show specific attack methods.\n\n\nCode\n# Group by year and attack method, count incidents, and calculate proportions\nattack_trends = df.groupby(['Year', 'Means of attack']).size().reset_index(name='count')\n\n# Filter to only include top 5 attack methods for clarity\ntop5_methods = df['Means of attack'].value_counts().head(5).index.tolist()\nattack_trends = attack_trends[attack_trends['Means of attack'].isin(top5_methods)]\n\n# Create a pivot table for plotting\nattack_pivot = attack_trends.pivot(index='Year', columns='Means of attack', values='count').fillna(0)\n\n# Calculate proportions for each year\nprops = attack_pivot.div(attack_pivot.sum(axis=1), axis=0)\n\n# Create the area plot using Plotly for interactivity\nfig = px.area(props.reset_index(), x='Year', y=props.columns,\n             title='Proportion of Attack Methods Over Time (Top 5 Methods)',\n             labels={'value': 'Proportion of Incidents', 'variable': 'Attack Method'},\n             color_discrete_sequence=px.colors.qualitative.Safe,\n             width=700,  # Control the width\n             height=450  # Increased height to avoid overlap\n)\n\n# Update layout to move the legend higher to avoid overlap with the title\nfig.update_layout(\n    xaxis_title='Year',\n    yaxis_title='Proportion of Incidents',\n    legend_title='Attack Method',\n    hovermode='x unified',\n    yaxis=dict(tickformat='.0%'),\n    legend=dict(orientation='h', yanchor='bottom', y=1.25, xanchor='center', x=0.5)  # Moved higher to avoid overlap\n)\n\nfig.show()\n\n\n\n\n                            \n                                            \n\n\nFigure 6: Evolution of Attack Methods Over Time\n\n\n\n\nOur analysis of attack methods reveals both the frequency and lethality of different threats facing humanitarian workers.\nThree methods dominate the landscape: shootings (1,240 incidents), kidnappings (890), and bodily assaults (836), together accounting for nearly 70% of all documented incidents. However, frequency doesn’t always correlate with lethality.\nThe bottom chart reveals that while vehicle-borne IEDs account for relatively few incidents, they produce the highest average casualties per incident (3.6), followed by aerial bombardments (3.1) and landmines (2.7). In contrast, bodily assaults, despite their frequency, cause fewer casualties per incident (1.4).\nThe interactive trend chart shows how attack methods have evolved over time. While “Unknown” methods and shootings have generally decreased proportionally, kidnappings have increased significantly since 2010. This suggests a strategic shift by perpetrators from simply eliminating aid workers to using them for ransom, propaganda, or political leverage.\nThis evolution in tactics demands corresponding evolution in security protocols. Organizations must develop different protective measures for different threat profiles – kidnap prevention training for areas with high abduction rates, and enhanced physical security where shootings predominate. The increased sophistication of attacks (including IEDs and aerial bombardments) also suggests perpetrators are becoming more organized and better-equipped."
  },
  {
    "objectID": "project_up.html#the-protection-gap-national-vs.-international-staff-vulnerability",
    "href": "project_up.html#the-protection-gap-national-vs.-international-staff-vulnerability",
    "title": "Aid Under Attack: Analyzing Security Threats to Humanitarian Operations",
    "section": "4. The Protection Gap: National vs. International Staff Vulnerability",
    "text": "4. The Protection Gap: National vs. International Staff Vulnerability\n\n\nCode\n# Calculate total casualties for national and international staff\nnationals = df[['Nationals killed', 'Nationals wounded', 'Nationals kidnapped']].sum()\nnationals.index = ['Killed', 'Wounded', 'Kidnapped']\ninternationals = df[['Internationals killed', 'Internationals wounded', 'Internationals kidnapped']].sum()\ninternationals.index = ['Killed', 'Wounded', 'Kidnapped']\n\n# Combine into a dataframe for plotting\nstaff_comparison = pd.DataFrame({\n    'National Staff': nationals, \n    'International Staff': internationals\n})\n\n# Create horizontal stacked bar chart\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Plot the bars\nbars = staff_comparison.plot(kind='barh', ax=ax, color=[main_palette[3], accent_palette[3]])\n\nfor i, row in enumerate(staff_comparison.index):\n    nat_val = staff_comparison.loc[row, 'National Staff']\n    int_val = staff_comparison.loc[row, 'International Staff']\n    total = nat_val + int_val\n    ratio = nat_val / total if total &gt; 0 else 0\n\n    ax.text(nat_val * 0.6, i - 0.15, f\"{int(nat_val)}\",\n            ha='center', va='center',\n            color='white',\n            fontweight='bold',\n            fontsize=11,\n            path_effects=[pe.withStroke(linewidth=3, foreground='black')])\n\n    ax.text(total * 0.06, i + 0.15, f\"{int(int_val)}\",\n            ha='center', va='center',\n            color='black',\n            fontweight='bold',\n            fontsize=11)\n\n    ax.text(total + 20, i, f\"({ratio:.1%} national)\",\n            va='center',\n            fontsize=10,\n            color='black')\n\n\n# Style the plot\nax = style_plot(ax, 'Casualties by Staff Type (1997-2024)', 'Number of Casualties', '')\n\n# Adjust legend and layout\nplt.legend(loc='upper right')\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\nFigure 7: Comparison of Casualties Between National and International Staff\n\n\n\n\n\n\n\nCode\n# Calculate annual casualties by staff type\nannual_casualties = df.groupby('Year')[[\n    'Nationals killed', 'Nationals wounded', 'Nationals kidnapped',\n    'Internationals killed', 'Internationals wounded', 'Internationals kidnapped'\n]].sum().reset_index()\n\n# Calculate total casualties by type per year\nannual_casualties['National Staff'] = annual_casualties[['Nationals killed', 'Nationals wounded', 'Nationals kidnapped']].sum(axis=1)\nannual_casualties['International Staff'] = annual_casualties[['Internationals killed', 'Internationals wounded', 'Internationals kidnapped']].sum(axis=1)\n\n# Calculate ratio (add small epsilon to avoid division by zero)\nannual_casualties['National:International Ratio'] = annual_casualties['National Staff'] / annual_casualties['International Staff'].replace(0, 0.001)\n\n# Create the line plot for ratio\nfig, ax = plt.subplots(figsize=(8, 5))\n\n# Plot the ratio\nax.plot(annual_casualties['Year'], annual_casualties['National:International Ratio'], \n        marker='o', linestyle='-', color=accent_palette[5], linewidth=2)\n\n# Add a trend line\nx = annual_casualties['Year']\ny = annual_casualties['National:International Ratio']\nz = np.polyfit(x, y, 1)\np = np.poly1d(z)\nax.plot(x, p(x), \"r--\", alpha=0.7, linewidth=2)\n\n# Style the plot\nax = style_plot(ax, 'Ratio of National to International Staff Casualties by Year', 'Year', 'Ratio (National:International)')\n\n# Add annotations for notable points\nhigh_points = [(2023, 21.9), (2024, 34.8), (2025, 21.7)]\ntext_positions = [(2022.5, 25), (2024.2, 38), (2025.2, 15)] \n\nfor i, point in enumerate(high_points):\n    year, ratio = point\n    text_x, text_y = text_positions[i]\n    ax.annotate(f\"{int(year)}: {ratio:.1f}x\",\n                xy=(year, ratio),\n                xytext=(text_x, text_y),\n                textcoords=\"data\",\n                bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"white\", alpha=0.8),\n                arrowprops=dict(arrowstyle=\"-&gt;\", connectionstyle=\"arc3,rad=.2\"))\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 8: Ratio of National to International Staff Casualties Over Time\n\n\n\n\n\nPerhaps the most troubling finding in our analysis is the stark disparity in security risks between national and international humanitarian staff. The data reveals a protection gap that raises profound ethical questions.\nNational staff bear a disproportionate burden of violence: - They account for 92.1% of all humanitarian workers killed - They represent 90.7% of all wounded personnel - They make up 83.0% of all kidnapping victims\nThe trend analysis is even more concerning, showing this disparity has widened over time. By 2024, national staff were 34.8 times more likely to become casualties than their international counterparts—a dramatic increase from earlier ratios of 4-5:1.\nSeveral structural factors contribute to this gap: - International staff are often evacuated during security crises while national staff remain - National staff typically work in “last mile” delivery in the most dangerous areas - Security resources and training are disproportionately allocated to international personnel - National staff may have less agency in refusing high-risk assignments due to economic pressures\nThis disparity demands urgent attention from humanitarian organizations. It requires not just technical security solutions but a fundamental rethinking of how risk is distributed, resources allocated, and vulnerability assessed. Organizations must develop more equitable security protocols that address the specific challenges facing national staff, who constitute the majority of the humanitarian workforce yet face significantly higher risks."
  },
  {
    "objectID": "project_up.html#behind-the-attacks-perpetrator-patterns",
    "href": "project_up.html#behind-the-attacks-perpetrator-patterns",
    "title": "Aid Under Attack: Analyzing Security Threats to Humanitarian Operations",
    "section": "5. Behind the Attacks: Perpetrator Patterns",
    "text": "5. Behind the Attacks: Perpetrator Patterns\n\n\nCode\n# Count incidents by actor type\nactor_counts = df['Actor type'].value_counts().reset_index()\nactor_counts.columns = ['Actor type', 'Incidents']\n\n# Calculate percentage\nactor_counts['Percentage'] = actor_counts['Incidents'] / actor_counts['Incidents'].sum() * 100\n\n# Note: We're keeping the \"Unknown\" perpetrator category despite its large size (52.4%)\n# as it represents a critical finding about attribution challenges rather than a data deficiency\n\n# Create pie chart for actor types\nfig, ax = plt.subplots(figsize=(8, 6))\n\n# Only display categories with more than 2% proportion, group smaller ones\nthreshold = 2  # percentage threshold\nsmall_categories = actor_counts[actor_counts['Percentage'] &lt; threshold]\nmajor_categories = actor_counts[actor_counts['Percentage'] &gt;= threshold]\n\n# If there are small categories, merge them\nif not small_categories.empty:\n    other_row = pd.DataFrame({\n        'Actor type': ['Other small categories'],\n        'Incidents': [small_categories['Incidents'].sum()],\n        'Percentage': [small_categories['Percentage'].sum()]\n    })\n    plot_data = pd.concat([major_categories, other_row], ignore_index=True)\nelse:\n    plot_data = major_categories\n\n# Define custom colors - ensuring \"Unknown\" stands out\ncolors = sns.color_palette(\"Blues_r\", len(plot_data))\n\n# Create the pie chart - without labels directly on it\nwedges, texts, autotexts = ax.pie(plot_data['Incidents'], \n                                 labels=None,  # No direct labels for clarity\n                                 autopct='%1.1f%%',\n                                 startangle=90, \n                                 colors=colors,\n                                 wedgeprops={'edgecolor': 'w', 'linewidth': 1})\n\n# Enhance visibility of percentage labels\nfor autotext in autotexts:\n    autotext.set_fontsize(9)\n    autotext.set_color('white')\n    autotext.set_path_effects([pe.withStroke(linewidth=2, foreground='black')])\n\n# Add title\nax.set_title('Distribution of Perpetrator Types in Security Incidents', fontsize=14, pad=20, fontweight='bold')\n\n# Create a legend with better formatting\nlegend_labels = [f\"{row['Actor type']} ({int(row['Incidents'])} incidents)\" \n                 for _, row in plot_data.iterrows()]\nplt.legend(wedges, legend_labels,\n          loc=\"center left\",\n          bbox_to_anchor=(1, 0, 0.5, 1),\n          fontsize=9)\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 9: Distribution of Perpetrator Types in Security Incidents\n\n\n\n\n\n\n\nCode\n# Create organization type flags\norg_cols = ['UN', 'INGO', 'ICRC', 'NRCS and IFRC', 'NNGO', 'Other']\n\n# For each organization type, count incidents by actor type\ntargeting_patterns = []\n\nfor org in org_cols:\n    # Filter for incidents where this organization type was affected\n    org_incidents = df[df[org] &gt; 0]\n    # Count incidents by actor type\n    actor_dist = org_incidents['Actor type'].value_counts().reset_index()\n    actor_dist.columns = ['Actor type', 'Incidents']\n    # Add organization type column\n    actor_dist['Target Organization'] = org\n    targeting_patterns.append(actor_dist)\n\n# Combine all data\ntargeting_df = pd.concat(targeting_patterns, ignore_index=True)\n\n# Filter to include only significant combinations - top actors\ntop_actors = df['Actor type'].value_counts().nlargest(5).index.tolist()\ntargeting_df = targeting_df[targeting_df['Actor type'].isin(top_actors)]\n\n# Handle organization labels for display\norg_labels = {\n    'UN': 'United Nations',\n    'INGO': 'International NGOs',\n    'ICRC': 'Int. Committee of Red Cross',\n    'NRCS and IFRC': 'Red Cross/Red Crescent',\n    'NNGO': 'National NGOs',\n    'Other': 'Other Organizations'\n}\ntargeting_df['Organization'] = targeting_df['Target Organization'].map(org_labels)\n\n# Create the heatmap data\nheatmap_pivot = targeting_df.pivot_table(\n    values='Incidents', \n    index='Organization',\n    columns='Actor type',\n    aggfunc='sum',\n    fill_value=0\n)\n\n# Normalize by row (organization) to show targeting patterns\nheatmap_norm = heatmap_pivot.div(heatmap_pivot.sum(axis=1), axis=0)\n\n# Create heatmap\nplt.figure(figsize=(8, 6))\nax = sns.heatmap(heatmap_norm, annot=True, fmt='.1%', cmap='Blues', linewidths=.5)\n\n# Style the plot\nplt.title('Targeting Patterns by Actor Type and Organization', fontsize=14, pad=20, fontweight='bold')\nplt.xlabel('Actor Type', fontsize=12, labelpad=10)\nplt.ylabel('Target Organization', fontsize=12, labelpad=10)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 10: Targeting Patterns by Actor Type and Organization\n\n\n\n\n\nUnderstanding who targets humanitarian workers is crucial for developing effective protection strategies. Our analysis reveals important patterns in perpetrator identities that have significant security implications.\nThe most striking finding is what we don’t know: 52.4% of all incidents involve unidentified perpetrators. This is not a data deficiency but rather a critical finding about the nature of these attacks. The high proportion of unknown actors reflects: 1. Deliberate tactics by attackers to avoid accountability 2. Challenges in attribution in complex environments 3. The strategic use of ambiguity by perpetrators\nWe’ve retained this “Unknown” category in our analysis precisely because it reveals important insights about the nature of threats to humanitarian workers.\nAmong identified perpetrators: - Non-state armed groups collectively represent the most significant known threat (24% of incidents across various categories) - State actors (including host governments and foreign forces) are implicated in 12% of incidents - Criminal groups account for 3% of incidents, typically motivated by material gain\nThe heatmap reveals distinct targeting patterns by different actors: - National NGOs face higher targeting from host state actors (14.9% of incidents) compared to other organizations - International organizations (UN, ICRC) show the highest proportion of unknown attackers (&gt;70%) - The Red Cross/Red Crescent movement faces a distinctive targeting pattern compared to other humanitarian organizations\nThese patterns have operational implications. Different security strategies are needed depending on which actors pose the greatest threat in a given context. For example, where state forces represent a significant threat to national NGOs, diplomatic engagement and visibility strategies may be more effective than traditional security measures."
  },
  {
    "objectID": "project_up.html#timing-matters-temporal-patterns-in-attacks",
    "href": "project_up.html#timing-matters-temporal-patterns-in-attacks",
    "title": "Aid Under Attack: Analyzing Security Threats to Humanitarian Operations",
    "section": "6. Timing Matters: Temporal Patterns in Attacks",
    "text": "6. Timing Matters: Temporal Patterns in Attacks\n\n\nCode\n# Extract month from the dataset\nmonthly_incidents = df.groupby('Month').size().reset_index(name='Incidents')\n# Sort by month numerically\nmonthly_incidents = monthly_incidents.sort_values('Month')\n\n# Create month names for better visualization\nmonth_names = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nmonthly_incidents['Month Name'] = monthly_incidents['Month'].apply(lambda x: month_names[int(x)-1] if pd.notnull(x) and 1 &lt;= int(x) &lt;= 12 else 'Unknown')\n\n# Filter out unknown months\nmonthly_incidents = monthly_incidents[monthly_incidents['Month Name'] != 'Unknown']\n\n# Create the bar chart\nfig, ax = plt.subplots(figsize=(8, 5))\nbars = ax.bar(monthly_incidents['Month Name'], monthly_incidents['Incidents'], color=main_palette[2])\n\n# Add data labels with better visibility\nfor i, v in enumerate(monthly_incidents['Incidents']):\n    ax.text(i, v + 10, str(int(v)), ha='center', fontsize=9,\n            path_effects=[pe.withStroke(linewidth=2, foreground='white')])\n\n# Style the plot\nax = style_plot(ax, 'Monthly Distribution of Security Incidents (1997-2024)', '', 'Number of Incidents')\n\n# Add average line\navg_incidents = monthly_incidents['Incidents'].mean()\nax.axhline(y=avg_incidents, color='red', linestyle='--', alpha=0.7)\nax.text(9, avg_incidents + 20, f'Monthly Average: {avg_incidents:.0f}', color='red', ha='right')  # Moved to right side\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 11: Monthly Distribution of Security Incidents\n\n\n\n\n\n\n\nCode\n# Calculate incidents by day of week where day information is available\ndf_with_day = df[df['Day'].notna()].copy()\n# Create a proper date from year, month, day\ndf_with_day['date'] = pd.to_datetime(df_with_day[['Year', 'Month', 'Day']].rename(\n    columns={'Year': 'year', 'Month': 'month', 'Day': 'day'}), errors='coerce')\n# Extract day of week\ndf_with_day['day_of_week'] = df_with_day['date'].dt.day_name()\n\n# Count incidents by day of week\nweekday_incidents = df_with_day['day_of_week'].value_counts().reindex([\n    'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'\n])\n\n# Create the bar chart\nfig, ax = plt.subplots(figsize=(8, 5))\nbars = ax.bar(weekday_incidents.index, weekday_incidents.values, color=main_palette[4])\n\n# Add data labels with better visibility\nfor i, v in enumerate(weekday_incidents.values):\n    ax.text(i, v + 10, str(int(v)), ha='center', fontsize=9,\n           color='black', fontweight='bold',\n           path_effects=[pe.withStroke(linewidth=3, foreground='white')])\n\n# Style the plot\nax = style_plot(ax, 'Security Incidents by Day of Week', '', 'Number of Incidents')\n\n# Add average line\navg_incidents = weekday_incidents.mean()\nax.axhline(y=avg_incidents, color='red', linestyle='--', alpha=0.7)\n# Move the average label to the right side\nax.text(6, avg_incidents + 20, f'Daily Average: {avg_incidents:.0f}', color='red', ha='right')\n\n# Highlight weekend days\nfor i, day in enumerate(weekday_incidents.index):\n    if day in ['Saturday', 'Sunday']:\n        bars[i].set_color(accent_palette[3])\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\nFigure 12: Security Incidents by Day of Week\n\n\n\n\n\nOur temporal analysis reveals that humanitarian security risks follow distinct patterns over time. Understanding these patterns can help organizations implement targeted protection measures when they’re most needed.\nLooking at monthly distributions, clear seasonal patterns emerge: - July and August stand out as particularly dangerous months, with incident rates approximately 15-20% above the monthly average - The winter months of December, January, and February show significantly lower risk - May also emerges as a high-risk month across multiple years\nThe weekly distribution adds another important dimension: - Midweek days (Tuesday through Thursday) show consistently higher incident rates - Sunday has notably lower incident frequency (highlighted in red) - The weekend drop-off varies significantly by region\nThese temporal patterns reflect underlying operational and conflict dynamics: - Improved weather and road conditions in summer months enable increased movement by both humanitarian actors and armed groups - Agricultural cycles influence conflict in some regions, with harvest periods seeing heightened tensions - Reduced operational tempo on weekends (particularly Sundays) corresponds to lower incident rates\nFor security planners, these patterns provide actionable intelligence. Implementing additional protective measures during high-risk months, adjusting movement schedules to avoid peak danger times, and aligning operational tempo with temporal risk patterns can significantly enhance staff safety while maintaining program delivery.\nOrganizations might consider: - Enhanced security protocols during July-August - Scheduling high-risk movements on Sundays where operationally feasible - Seasonal-specific risk assessments and mitigation strategies - Context-specific calendar mapping of heightened risk periods"
  },
  {
    "objectID": "project_up.html#conclusions-and-recommendations",
    "href": "project_up.html#conclusions-and-recommendations",
    "title": "Aid Under Attack: Analyzing Security Threats to Humanitarian Operations",
    "section": "Conclusions and Recommendations",
    "text": "Conclusions and Recommendations\nOur data-driven analysis of security incidents affecting humanitarian workers reveals several critical insights with important implications for how organizations operate in high-risk environments.\n\nKey Evidence-Based Findings\n\nEscalating Danger: The 938% increase in incidents from 1997 to 2024 represents a fundamental shift in the humanitarian operating environment. This trend correlates directly with major global conflicts and shows no signs of reversal.\nGeographic Concentration: Risk is not distributed randomly but concentrates in specific conflict zones—most notably South Sudan, Syria, Afghanistan, and Gaza. Even within these countries, certain regions (Jonglei, Idlib) face disproportionate risk.\nEvolving Attack Methods: While shootings remain most common, the proportional increase in kidnappings since 2010 signals a strategic shift by perpetrators. Attack methods are becoming more sophisticated and targeted.\nNational Staff Vulnerability Gap: The most ethically challenging finding is the severe disparity in risk between national and international staff. With national staff bearing over 80% of casualties and this gap widening (reaching 34.8:1 in 2024), current protection approaches clearly fall short.\nHigh Rate of Unknown Perpetrators: The fact that 52.4% of incidents involve unidentified attackers reflects a deliberate strategy of anonymous violence that enables impunity.\nTemporal Risk Patterns: The data reveals distinct seasonal (summer peak, winter trough) and weekly (midweek high, weekend low) patterns that can inform operational planning.\n\n\n\nEvidence-Based Recommendations for Humanitarian Organizations\n\nAddress the National-International Protection Gap:\n\nDevelop common security standards that apply equally to all staff regardless of nationality\nAllocate security resources proportionally to risk exposure rather than staff category\nInclude national staff in security decision-making structures at all levels\nEvidence: The 34.8:1 casualty ratio in 2024 and 85% of deaths affecting national staff demand immediate action\n\nImplement Geographic Risk Targeting:\n\nDevelop region-specific security protocols for identified high-risk areas\nEnhance pre-deployment training for staff assigned to the top 10 most dangerous regions\nAllocate security resources proportionally to geographic risk profiles\nEvidence: The top 5 regions account for 583 incidents (13.4% of the total)—a clear focus for targeted interventions\n\nAdapt to Evolving Attack Methods:\n\nEnhance anti-kidnapping protocols in areas showing increased abduction rates\nDevelop context-specific security measures based on predominant attack methods\nUpdate security training to address emerging sophisticated threats\nEvidence: The rising proportion of kidnappings and the varying lethality by attack method require tailored approaches\n\nLeverage Temporal Patterns:\n\nImplement enhanced security protocols during high-risk months (July-August)\nSchedule high-risk movements on lower-risk days where operationally feasible\nDevelop seasonal security planning cycles\nEvidence: The 15-20% higher incident rates during peak months offer clear opportunities for temporal risk management\n\n\n\n\nRecommendations for Policy Makers and Donors\n\nStrengthen Protection Frameworks:\n\nMandate equal security provisions for national and international staff in funding requirements\nSupport accountability mechanisms for attacks on humanitarian personnel\nEvidence: The persistent impunity (52.4% unknown perpetrators) undermines deterrence\n\nReform Funding Structures:\n\nRequire dedicated security budget lines proportional to contextual risk\nSupport specialized security capacity building initiatives for national staff\nEvidence: The geographic concentration of risk justifies targeted security investments\n\nAddress Root Causes:\n\nPrioritize diplomatic engagement in regions with highest humanitarian casualty rates\nSupport conflict resolution in the top 5 most dangerous regions\nEvidence: The correlation between major conflicts and incident spikes demonstrates the importance of addressing drivers of violence\n\n\nBy implementing these evidence-based recommendations, humanitarian organizations and policy makers can work toward reversing the alarming trends documented in this analysis. The data clearly shows where, when, and how humanitarian workers face the greatest dangers—now action must follow to ensure they can fulfill their vital mission with the protection they deserve.\n\n“The safety of those who bring aid to the world’s most vulnerable is not merely an operational concern—it is a moral imperative. The data compels us to act.”"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DATA FOR HUMANITY",
    "section": "",
    "text": "This data-driven analysis explores security threats facing humanitarian workers worldwide."
  },
  {
    "objectID": "index.html#welcome-to-my-research-project",
    "href": "index.html#welcome-to-my-research-project",
    "title": "DATA FOR HUMANITY",
    "section": "",
    "text": "This data-driven analysis explores security threats facing humanitarian workers worldwide."
  }
]